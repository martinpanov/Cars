name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: |
            client/package-lock.json
            server/package-lock.json

      - name: Install client dependencies
        working-directory: ./client
        run: npm ci

      - name: Install server dependencies
        working-directory: ./server
        run: npm ci

      - name: Run client formatter check
        working-directory: ./client
        run: npm run format:check
        continue-on-error: true

      - name: Build client
        working-directory: ./client
        run: npm run build

      - name: Run client linter
        working-directory: ./client
        run: npm run lint
        continue-on-error: true

      - name: Build server
        working-directory: ./server
        run: npm run build

      - name: Run server linter
        working-directory: ./server
        run: npm run lint
        continue-on-error: true

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            # Ensure shared network exists
            docker network inspect shared-network >/dev/null 2>&1 || docker network create shared-network

            # Navigate to application directory
            cd ~/apps/Cars

            # Pull latest changes
            git pull origin main

            # Build frontend in Docker container
            docker run --rm \
              -v "$(pwd)/client:/app" \
              -w /app \
              node:22-alpine \
              sh -c "npm ci && npm run build"

            # Verify build succeeded
            ls -la client/dist/

            # Rebuild and restart backend containers (uses server/.env file)
            docker-compose --env-file server/.env build --no-cache
            docker-compose --env-file server/.env up -d

            # Wait for cars-server to be healthy before restarting nginx
            sleep 20

            # Restart nginx to ensure it can resolve cars-server hostname and pick up new static files
            cd ~/apps/nginx
            docker-compose restart nginx

            # Clean up unused Docker resources
            cd ~/apps/Cars
            docker image prune -f

            # Wait for final health check
            sleep 10

            # Check if application is healthy
            cd ~/apps/Cars
            docker-compose ps
